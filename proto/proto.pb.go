// Code generated by protoc-gen-go.
// source: proto.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	QueryRequest
	Value
	QueryResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type QueryRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Value struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto1.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QueryResponse struct {
	Columns []*Value `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto1.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryResponse) GetColumns() []*Value {
	if m != nil {
		return m.Columns
	}
	return nil
}

func init() {
	proto1.RegisterType((*QueryRequest)(nil), "proto.QueryRequest")
	proto1.RegisterType((*Value)(nil), "proto.Value")
	proto1.RegisterType((*QueryResponse)(nil), "proto.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ClientService service

type ClientServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (ClientService_QueryClient, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (ClientService_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientService_serviceDesc.Streams[0], c.cc, "/proto.ClientService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type clientServiceQueryClient struct {
	grpc.ClientStream
}

func (x *clientServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClientService service

type ClientServiceServer interface {
	Query(*QueryRequest, ClientService_QueryServer) error
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).Query(m, &clientServiceQueryServer{stream})
}

type ClientService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type clientServiceQueryServer struct {
	grpc.ServerStream
}

func (x *clientServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _ClientService_Query_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x03, 0x93, 0x42, 0xac, 0x60, 0x4a, 0x49, 0x85, 0x8b, 0x27, 0xb0, 0x34, 0xb5, 0xa8,
	0x32, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x84, 0x8b, 0xb5, 0x10, 0xc4, 0x97, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0xf4, 0xb9, 0x58, 0xc3, 0x12, 0x73, 0x4a, 0x53,
	0x85, 0x84, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0xc1, 0xb2, 0xbc, 0x41, 0x60, 0x36, 0x48, 0x2c,
	0x25, 0xb1, 0x24, 0x51, 0x82, 0x09, 0x28, 0xc6, 0x13, 0x04, 0x66, 0x2b, 0x99, 0x73, 0xf1, 0x42,
	0x8d, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x52, 0xe3, 0x62, 0x4f, 0xce, 0xcf, 0x29, 0xcd,
	0xcd, 0x2b, 0x06, 0xea, 0x65, 0xd6, 0xe0, 0x36, 0xe2, 0x81, 0xb8, 0x43, 0x0f, 0x6c, 0x6e, 0x10,
	0x4c, 0xd2, 0xc8, 0x95, 0x8b, 0xd7, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x24, 0x38, 0xb5, 0xa8, 0x2c,
	0x33, 0x39, 0x55, 0xc8, 0x84, 0x8b, 0x15, 0x6c, 0x92, 0x90, 0x30, 0x54, 0x03, 0xb2, 0x73, 0xa5,
	0x44, 0x50, 0x05, 0x21, 0x96, 0x19, 0x30, 0x26, 0xb1, 0x81, 0x85, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xfc, 0x14, 0xf8, 0x64, 0xf3, 0x00, 0x00, 0x00,
}
